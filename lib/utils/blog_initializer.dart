import '../data/blog_sample_data.dart';
import '../services/app_config_firebase_service.dart';

/// Utilitaire pour initialiser le module blog
class BlogInitializer {
  
  /// Initialise compl√®tement le module blog
  static Future<void> initializeBlogModule() async {
    try {
      print('üöÄ Initialisation du module Blog...');
      
      // 1. V√©rifier que le module blog est activ√© dans la configuration
      await _ensureBlogModuleEnabled();
      
      // 2. Cr√©er des donn√©es d'exemple si n√©cessaire
      await _createSampleDataIfNeeded();
      
      // 3. V√©rifier les permissions par d√©faut
      await _setupDefaultPermissions();
      
      print('‚úÖ Module Blog initialis√© avec succ√®s !');
      
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation du blog: $e');
      rethrow;
    }
  }
  
  /// S'assure que le module blog est activ√©
  static Future<void> _ensureBlogModuleEnabled() async {
    try {
      final config = await AppConfigFirebaseService.getAppConfig();
      final blogModule = config.modules.firstWhere(
        (module) => module.id == 'blog',
        orElse: () => throw Exception('Module blog non trouv√© dans la configuration'),
      );
      
      if (!blogModule.isEnabledForMembers) {
        print('üìù Activation du module blog pour les membres...');
        await AppConfigFirebaseService.updateModuleConfig(
          'blog',
          isEnabledForMembers: true,
        );
      }
      
      print('‚úÖ Module blog activ√©');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la v√©rification du module: $e');
      // Ne pas faire √©chouer l'initialisation pour cette erreur
    }
  }
  
  /// Cr√©e des donn√©es d'exemple si la base est vide
  static Future<void> _createSampleDataIfNeeded() async {
    try {
      // Ici on pourrait v√©rifier s'il y a d√©j√† du contenu
      // Pour l'instant, on cr√©√© toujours les donn√©es d'exemple
      print('üìù Cr√©ation des donn√©es d\'exemple...');
      await BlogSampleData.createSampleBlogData();
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la cr√©ation des donn√©es d\'exemple: $e');
      // Ne pas faire √©chouer l'initialisation pour cette erreur
    }
  }
  
  /// Configure les permissions par d√©faut
  static Future<void> _setupDefaultPermissions() async {
    try {
      print('üîê Configuration des permissions...');
      
      // Les permissions sont g√©r√©es dans AuthService
      // Ici on pourrait ajouter une logique de configuration initiale
      
      print('‚úÖ Permissions configur√©es');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la configuration des permissions: $e');
    }
  }
  
  /// V√©rifie que le module blog fonctionne correctement
  static Future<bool> verifyBlogModule() async {
    try {
      print('üîç V√©rification du module blog...');
      
      // V√©rifier la configuration
      final config = await AppConfigFirebaseService.getAppConfig();
      final blogModule = config.modules.firstWhere(
        (module) => module.id == 'blog',
        orElse: () => throw Exception('Module blog non trouv√©'),
      );
      
      if (!blogModule.isEnabledForMembers) {
        print('‚ùå Module blog non activ√© pour les membres');
        return false;
      }
      
      print('‚úÖ Module blog v√©rifi√© avec succ√®s');
      return true;
      
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification: $e');
      return false;
    }
  }
  
  /// R√©initialise compl√®tement le module blog
  static Future<void> resetBlogModule() async {
    try {
      print('üîÑ R√©initialisation du module blog...');
      
      // Supprimer les donn√©es existantes
      await BlogSampleData.clearSampleData();
      
      // Recr√©er les donn√©es d'exemple
      await BlogSampleData.createSampleBlogData();
      
      print('‚úÖ Module blog r√©initialis√©');
      
    } catch (e) {
      print('‚ùå Erreur lors de la r√©initialisation: $e');
      rethrow;
    }
  }
}